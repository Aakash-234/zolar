/**
 * This file was generated by kysely-codegen.
 * Please do not edit it manually.
 */

import type { ColumnType } from "kysely";

export type DocumentStatus = "approved" | "pending" | "processing" | "rejected" | "reviewed";

export type DocumentType = "homeowner_id" | "installation_photo" | "loan_doc" | "rebate_form";

export type ErrorSeverityLevel = "critical" | "high" | "low" | "medium";

export type Generated<T> = T extends ColumnType<infer S, infer I, infer U>
  ? ColumnType<S, I | undefined, U>
  : ColumnType<T, T | undefined, T>;

export type Numeric = ColumnType<string, number | string, number | string>;

export type Timestamp = ColumnType<Date, Date | string, Date | string>;

export interface DocumentErrors {
  createdAt: Generated<Timestamp | null>;
  documentId: string;
  errorMessage: string;
  errorType: string;
  fieldName: string | null;
  id: Generated<string>;
  isResolved: Generated<boolean | null>;
  severityLevel: Generated<ErrorSeverityLevel>;
  suggestedFix: string;
  updatedAt: Generated<Timestamp | null>;
}

export interface DocumentFields {
  confidenceScore: Numeric | null;
  createdAt: Generated<Timestamp | null>;
  documentId: string | null;
  fieldName: string;
  fieldValue: string | null;
  id: Generated<string>;
  isValidated: Generated<boolean | null>;
  updatedAt: Generated<Timestamp | null>;
  validationNotes: string | null;
}

export interface DocumentReviews {
  createdAt: Generated<Timestamp | null>;
  documentId: string | null;
  id: Generated<string>;
  missingFields: string[] | null;
  reviewedAt: Generated<Timestamp | null>;
  reviewerName: string | null;
  reviewNotes: string | null;
  reviewStatus: DocumentStatus;
}

export interface Documents {
  createdAt: Generated<Timestamp | null>;
  documentType: DocumentType;
  filename: string;
  fileUrl: string;
  id: Generated<string>;
  installerCompany: string | null;
  originalFilename: string;
  processedAt: Timestamp | null;
  projectName: string | null;
  reviewedAt: Timestamp | null;
  status: Generated<DocumentStatus | null>;
  updatedAt: Generated<Timestamp | null>;
  uploadedAt: Generated<Timestamp | null>;
}

export interface DB {
  documentErrors: DocumentErrors;
  documentFields: DocumentFields;
  documentReviews: DocumentReviews;
  documents: Documents;
}


// Use these for zod schema enums or other purposes, since the kysely enums are just types
export const DocumentStatusArrayValues: [DocumentStatus, ...DocumentStatus[]] = ["approved","pending","processing","rejected","reviewed"];
export const DocumentTypeArrayValues: [DocumentType, ...DocumentType[]] = ["homeowner_id","installation_photo","loan_doc","rebate_form"];
export const ErrorSeverityLevelArrayValues: [ErrorSeverityLevel, ...ErrorSeverityLevel[]] = ["critical","high","low","medium"];
// Note: kysely maps the table/column/enum names from snake_case to camelCase and PascalCase. When running SQL statements, make sure to use snake_case, but TypeScript code should use camelCase or PascalCase.